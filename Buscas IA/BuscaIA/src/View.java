
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Marco Antonio
 */
public class View extends javax.swing.JFrame {

    int[][] matriz;
    boolean ponderado;
    
    Node origem;
    ListaInput destinos;
    ListaInput backup = new ListaInput();
    Busca b = new Busca();
    Lista arvoreResposta;
    
    NodeP origemP;
    ListaPInput destinosP;
    ListaPInput backupP = new ListaPInput();
    BuscaP bp = new BuscaP();
    ListaP arvoreRespostaP;
    
    
    public View() {
        initComponents();
        setLocationRelativeTo(null);
        
        jBSetTipoMapa.setEnabled(true);
        jBSetMapa.setEnabled(false);
        jBSetOrigem.setEnabled(false);
        jBSetDestino.setEnabled(false);
        jBSearch.setEnabled(false);
        jBReset.setEnabled(false);
        jCBBusca.setEnabled(false);
        jCBBuscaP.setEnabled(false);
        jTACaminho.setEditable(false);
        jTAPontos.setEditable(false);
        jTAInfo.setEditable(false);
        jTAMatrizOriginal.setEditable(false);
        jTAMatrizResposta.setEditable(false);
        jTAHeuristica.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPBusca = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTACaminho = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAMatrizResposta = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTAPontos = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTAMatrizOriginal = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAInfo = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAHeuristica = new javax.swing.JTextArea();
        jPOp = new javax.swing.JPanel();
        jBExit = new javax.swing.JButton();
        jBSearch = new javax.swing.JButton();
        jBReset = new javax.swing.JButton();
        jBSetDestino = new javax.swing.JButton();
        jBSetMapa = new javax.swing.JButton();
        jBSetOrigem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jCBBuscaP = new javax.swing.JComboBox<>();
        jCBBusca = new javax.swing.JComboBox<>();
        jBSetTipoMapa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPBusca.setBorder(javax.swing.BorderFactory.createTitledBorder("Busca:"));

        jTACaminho.setColumns(20);
        jTACaminho.setRows(5);
        jScrollPane2.setViewportView(jTACaminho);

        jTAMatrizResposta.setColumns(20);
        jTAMatrizResposta.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAMatrizResposta.setRows(5);
        jScrollPane4.setViewportView(jTAMatrizResposta);

        jTAPontos.setColumns(20);
        jTAPontos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAPontos.setRows(5);
        jScrollPane5.setViewportView(jTAPontos);

        jTAMatrizOriginal.setColumns(20);
        jTAMatrizOriginal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAMatrizOriginal.setRows(5);
        jScrollPane6.setViewportView(jTAMatrizOriginal);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 200));

        jTAInfo.setColumns(20);
        jTAInfo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAInfo.setRows(5);
        jTAInfo.setText("Codificação:\n0 - Espaço Vazio\n1 - Espaço Percorrido\n2 - Espaço do Caminho\n3 - Ponto de Origem\n4 - Ponto de Destino\n\nObs.: Valor 1 só aparece via console");
        jScrollPane3.setViewportView(jTAInfo);

        jTAHeuristica.setColumns(20);
        jTAHeuristica.setRows(5);
        jScrollPane1.setViewportView(jTAHeuristica);

        javax.swing.GroupLayout jPBuscaLayout = new javax.swing.GroupLayout(jPBusca);
        jPBusca.setLayout(jPBuscaLayout);
        jPBuscaLayout.setHorizontalGroup(
            jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBuscaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPBuscaLayout.setVerticalGroup(
            jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBuscaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPBuscaLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPBuscaLayout.createSequentialGroup()
                        .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(jScrollPane6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5))))
                .addContainerGap())
        );

        jPOp.setBorder(javax.swing.BorderFactory.createTitledBorder("Operações:"));

        jBExit.setText("Encerrar aplicação");
        jBExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExitActionPerformed(evt);
            }
        });

        jBSearch.setText("Executar Busca");
        jBSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSearchActionPerformed(evt);
            }
        });

        jBReset.setText("Resetar Busca");
        jBReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResetActionPerformed(evt);
            }
        });

        jBSetDestino.setText("Gerar Destinos");
        jBSetDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSetDestinoActionPerformed(evt);
            }
        });

        jBSetMapa.setText("Gerar Mapa");
        jBSetMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSetMapaActionPerformed(evt);
            }
        });

        jBSetOrigem.setText("Gerar Origem");
        jBSetOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSetOrigemActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipos de Busca:"));

        jCBBuscaP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Custo Uniforme", "Greedy", "A-Estrela", "Aprofudamento Iterativo A-Estrela" }));
        jCBBuscaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBBuscaPActionPerformed(evt);
            }
        });

        jCBBusca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Amplitude", "Profundidade", "Profundidade Limitada", "Aprofundamento Iterativo", "Bidirecional" }));
        jCBBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBBuscaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBBuscaP, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCBBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCBBuscaP, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jBSetTipoMapa.setText("Tipo de Mapa");
        jBSetTipoMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSetTipoMapaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPOpLayout = new javax.swing.GroupLayout(jPOp);
        jPOp.setLayout(jPOpLayout);
        jPOpLayout.setHorizontalGroup(
            jPOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPOpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBReset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBSetDestino, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBSetOrigem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBSetMapa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBSetTipoMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBExit, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPOpLayout.setVerticalGroup(
            jPOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOpLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jBSetTipoMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jBSetMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBSetOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBSetDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBReset, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBExit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPBusca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSetMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSetMapaActionPerformed
        SetMapa sm = new SetMapa(this, true);
        sm.setLocationRelativeTo(this);
        sm.setVisible(true);
        if(sm.getMaxx()!=0&&sm.getMaxy()!=0){
            matriz = new int[sm.getMaxx()][sm.getMaxy()];
            jTAMatrizOriginal.setText("Matriz Original: \n"+printMatriz(matriz));
            jBSetMapa.setEnabled(false);
            jBSetOrigem.setEnabled(true);
        }
    }//GEN-LAST:event_jBSetMapaActionPerformed

    private void jBExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jBExitActionPerformed

    private void jBSetOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSetOrigemActionPerformed
        SetOrigem so = new SetOrigem(this, true, matriz);
        so.setLocationRelativeTo(this);
        so.setVisible(true);
        if(!ponderado){
            if(so.getOrigem()!=null){
                matriz = so.getMatrizAux();
                origem = so.getOrigem();
                jTAMatrizOriginal.setText("Matriz Original: \n"+printMatriz(matriz));
                jTAPontos.setText("Origem: ("+origem.getX()+", "+origem.getY()+")");
                jBSetOrigem.setEnabled(false);
                jBSetDestino.setEnabled(true);
            }
        }else{
            if(so.getOrigem()!=null){
                matriz = so.getMatrizAux();
                origemP = new NodeP(so.getOrigem());
                jTAMatrizOriginal.setText("Matriz Original: \n"+printMatriz(matriz));
                jTAPontos.setText("Origem: ("+origemP.getX()+", "+origemP.getY()+")");
                jBSetOrigem.setEnabled(false);
                jBSetDestino.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jBSetOrigemActionPerformed

    private void jBSetDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSetDestinoActionPerformed
        SetQTDDestino sd = new SetQTDDestino(this, true, matriz, ponderado);
        StringBuilder sb = new StringBuilder();
        sd.setLocationRelativeTo(this);
        sd.setVisible(true);
        
        if(!ponderado){
            if(!sd.getInput().isEmpty()){
                matriz = sd.getMatrizAux();
                destinos = sd.getInput();
                jTAMatrizOriginal.setText("Matriz Original: \n"+printMatriz(matriz));
                sb.append("Origem: (").append(origem.getX()).append(", ").append(origem.getY()).append(")\n");
                for(int i =0; i < destinos.nodeCounter();i++){
                    sb.append("Destino ").append(i+1).append(": (").append(destinos.getNode(i).getX()).append(", ").append(destinos.getNode(i).getY()).append(")\n");
                }
                backup.copiaLista(destinos);
            }
        }else{
            if(!sd.getInputP().isEmpty()){
                matriz = sd.getMatrizAux();
                destinosP = sd.getInputP();
                jTAMatrizOriginal.setText("Matriz Original: \n"+printMatriz(matriz));
                sb.append("Origem: (").append(origemP.getX()).append(", ").append(origemP.getY()).append(")\n");
                for(int i =0; i < destinosP.nodeCounter();i++){
                    sb.append("Destino ").append(i+1).append(": (").append(destinosP.getNodeP(i).getX()).append(", ").append(destinosP.getNodeP(i).getY()).append(")\n");
                }
                backupP.esvaziaLista();
                backupP.copiaLista(destinosP);
            }
        }
        jTAPontos.setText(sb.toString());
        jBSetDestino.setEnabled(false);
        jBSearch.setEnabled(true);
        jCBBuscaP.setEnabled(ponderado);
        jCBBusca.setEnabled(!ponderado);
    }//GEN-LAST:event_jBSetDestinoActionPerformed

    private void jCBBuscaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBBuscaPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBBuscaPActionPerformed

    private void jBSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSearchActionPerformed
       if(!ponderado){
            if(jCBBusca.getSelectedItem()=="Amplitude"){
               if(b.amplitude(origem, destinos, matriz) instanceof Lista lista){
                    arvoreResposta = lista;
                    Lista caminhoResposta = caminho(backup, arvoreResposta);
                    resetaVarredura(matriz);
                    jTACaminho.setText("Print do caminho final:\n\n"+caminhoResposta.show());
        //            jTACaminho.setText("Print da arvore final:\n\n"+arvoreResposta.show());
                    System.out.println("Print da arvore final:\n\n"+arvoreResposta.show());
                }else jTACaminho.setText("Caminho não encontrado");

           }else if(jCBBusca.getSelectedItem()=="Profundidade"){
               if(b.profundidade(origem, destinos, matriz) instanceof Lista lista){
                    arvoreResposta = lista;
                    Lista caminhoResposta = caminho(backup, arvoreResposta);
                    resetaVarredura(matriz);
                    jTACaminho.setText("Print do caminho final:\n\n"+caminhoResposta.show());
        //            jTACaminho.setText("Print da arvore final:\n\n"+arvoreResposta.show());
                    System.out.println("Print da arvore final:\n\n"+arvoreResposta.show());
                }else jTACaminho.setText("Caminho não encontrado");

           }else if(jCBBusca.getSelectedItem()=="Profundidade Limitada"){
               boolean go = false;
               int limite = 0;
               while(!go){
                   //o certo é criar um meu pra input
                   limite = Integer.parseInt(JOptionPane.showInputDialog(this, "Informe valor do limite", "View Buscas", JOptionPane.QUESTION_MESSAGE));
                   go = true;
                   if(limite>(matriz[0].length*matriz.length-1)||limite<=0){
                       JOptionPane.showMessageDialog(this, "Valor de limite inválido", "Warning", 0);
                       go = false;
                   }
               }

               if(b.profundidadeLimitada(origem, destinos, matriz,limite) instanceof Lista lista){
                    arvoreResposta = lista;
                    Lista caminhoResposta = caminho(backup, arvoreResposta);
                    resetaVarredura(matriz);
                    jTACaminho.setText("Print do caminho final:\n\n"+caminhoResposta.show());
        //            jTACaminho.setText("Print da arvore final:\n\n"+arvoreResposta.show());
                    System.out.println("Print da arvore final:\n\n"+arvoreResposta.show());
                }else jTACaminho.setText("Caminho não encontrado");
           }else if(jCBBusca.getSelectedItem()=="Aprofundamento Iterativo"){
               boolean go = false;
               int limite = 0;
               while(!go){
                   limite = Integer.parseInt(JOptionPane.showInputDialog(this, "Informe valor do limite", "View Buscas", JOptionPane.QUESTION_MESSAGE));
                   go = true;
                   if(limite>(matriz[0].length*matriz.length-1)||limite<=0){
                       JOptionPane.showMessageDialog(this, "Valor de limite inválido", "Warning", 0);
                       go = false;
                   }
               }

               if(b.aprofundamentoIterativo(origem, destinos, matriz, limite) instanceof Lista lista){
                    arvoreResposta = lista;
                    Lista caminhoResposta = caminho(backup, arvoreResposta);
                    resetaVarredura(matriz);
                    jTACaminho.setText("Print do caminho final:\n\n"+caminhoResposta.show());
        //            jTACaminho.setText("Print da arvore final:\n\n"+arvoreResposta.show());
                    System.out.println("Print da arvore final:\n\n"+arvoreResposta.show());
                }else jTACaminho.setText("Caminho não encontrado");
           }else if(jCBBusca.getSelectedItem()=="Bidirecional"){
               if(b.bidirecional(origem, destinos, matriz) instanceof Lista lista){

                arvoreResposta = lista;
                arrumaNivel(arvoreResposta);
                resetaVarredura(matriz);
                jTACaminho.setText("Print da arvore final:\n\n"+arvoreResposta.show());
                
                }else jTACaminho.setText("Caminho não encontrado");
           }
            
            jTAHeuristica.setText("Matrizes não ponderadas não apresentam heuristicas :(");
            jCBBusca.setEnabled(false);
            
       }else{ //Se for ponderado
           
           if(jCBBuscaP.getSelectedItem()=="Custo Uniforme"){
               if(bp.custoUniforme(origemP, destinosP, matriz) instanceof ListaP listap){
                arvoreRespostaP = listap;
                resetaVarredura(matriz);
                jTACaminho.setText("Print da arvore final:\n\n"+arvoreRespostaP.show());
            }else jTACaminho.setText("Caminho não encontrado");
               
           }else if(jCBBuscaP.getSelectedItem()=="Greedy"){
               int[][] h = bp.setNextHeuristica(origemP, destinosP, matriz);
               
               if(bp.greedy(origemP, destinosP, matriz, h) instanceof ListaP listap){
                arvoreRespostaP = listap;
                resetaVarredura(matriz);
                jTACaminho.setText("Print da arvore final:\n\n"+arvoreRespostaP.show());
                }else jTACaminho.setText("Caminho não encontrado");
               
           }else if(jCBBuscaP.getSelectedItem()=="A-Estrela"){
               int[][] h = bp.setNextHeuristica(origemP, destinosP, matriz);
               
               if(bp.aEstrela(origemP, destinosP, matriz, h) instanceof ListaP listap){
                arvoreRespostaP = listap;
                resetaVarredura(matriz);
                jTACaminho.setText("Print da arvore final:\n\n"+arvoreRespostaP.show());
                }else jTACaminho.setText("Caminho não encontrado");
           }else if(jCBBuscaP.getSelectedItem()=="Aprofudamento Iterativo A-Estrela"){
               boolean go = false;
               int limite = 0;
               while(!go){
                   //o certo é criar um meu pra input
                   limite = Integer.parseInt(JOptionPane.showInputDialog(this, "Informe valor do limite", "View Buscas", JOptionPane.QUESTION_MESSAGE));
                   go = true;
                   if(limite>(matriz[0].length*matriz.length-1*3)||limite<=0){
                       JOptionPane.showMessageDialog(this, "Valor de limite inválido", "Warning", 0);
                       go = false;
                   }
               }
             
               int[][] h = bp.setNextHeuristica(origemP, destinosP, matriz);
               
               if(bp.aiaEstrela(origemP, destinosP, matriz, h, limite) instanceof ListaP listap){
                arvoreRespostaP = listap;
                resetaVarredura(matriz);
                jTACaminho.setText("Print da arvore final:\n\n"+arvoreRespostaP.show());
                }else jTACaminho.setText("Caminho não encontrado");
           }
           
           jTAHeuristica.setText("Heuristica da origem ("+origemP.getX()+", "+origemP.getY()+") : \n"+printMatriz(bp.heuristica(origemP, matriz))+"\n\n");
           for(int i = 0; i < backupP.nodeCounter(); i++){
               jTAHeuristica.setText(jTAHeuristica.getText()+"Heuristica do destino ("+backupP.getNodeP(i).getX()+", "+backupP.getNodeP(i).getY()+") : \n"+printMatriz(bp.heuristica(backupP.getNodeP(i), matriz))+"\n\n");
           }
           jCBBuscaP.setEnabled(false);
       }
       
       jTAMatrizResposta.setText("Matriz Resposta: \n"+printMatriz(matriz));
       jBSearch.setEnabled(false);
       jBReset.setEnabled(true);
    }//GEN-LAST:event_jBSearchActionPerformed

    private void jBResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResetActionPerformed
        jTAMatrizResposta.setText("");
        jTAMatrizOriginal.setText("");
        jTAPontos.setText("");
        jTACaminho.setText("");
        jTAHeuristica.setText("");
        jBSetTipoMapa.setEnabled(true);
        jBReset.setEnabled(false);
    }//GEN-LAST:event_jBResetActionPerformed

    private void jCBBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBBuscaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBBuscaActionPerformed

    private void jBSetTipoMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSetTipoMapaActionPerformed
        String[] op = {"Sim", "Não"};
        int x = JOptionPane.showOptionDialog(this, "A matriz será ponderada? (haverá custo para os passos?)","Matriz Ponderada?",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, op, op[0]);
        if(x==0){
            ponderado = true;
        }else{
            ponderado = false;
        }
        jBSetTipoMapa.setEnabled(false);
        jBSetMapa.setEnabled(true);
    }//GEN-LAST:event_jBSetTipoMapaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    
    public static int diferenca(Node origem, Node destino){
        return (Math.abs(origem.getX()-destino.getX())+Math.abs(origem.getY()-destino.getY())/2)+1;
    }
    
    public static void resetaVarredura(int matriz [][]){
        for(int i = 0; i < matriz.length;i++){
            for(int j = 0; j < matriz[0].length;j++){
                if(matriz[i][j]==1) matriz[i][j]=0;
            }
        }
    }
    
    public static String printMatriz(int[][] matriz){
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < matriz.length;i++){
            for(int j = 0; j < matriz[0].length;j++){
                if(matriz[i][j]<10) sb.append(" ").append(matriz[i][j]).append(" ");
                else sb.append(matriz[i][j]).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
    
    public static Node destinoFinal(ListaInput input, Lista resposta){
        Node aux = resposta.getInicio();
        while(aux!=null){
            //System.out.println("Comparando: ("+aux.getX()+", "+aux.getY()+")");
            for(int i = 0; i < input.nodeCounter();i++){
                //System.out.println("Ref "+(i+1)+": ("+input.getNode(i).getX()+", "+input.getNode(i).getY()+")");
                if(input.contains(aux.getX(), aux.getY())) return aux;
            }
            aux = aux.getProx();
        }
        return aux;
    }
    
    public static Lista caminho(ListaInput input, Lista resposta){
        Node ref = destinoFinal(input, resposta);
        Lista res = new Lista();
        while(ref!=null){
            res.copiaLista(resposta.caminho(ref));
            input.remove(ref);
            ref = destinoFinal(input, resposta);
        }
        return res;
    }
    
    public static void arrumaNivel(Lista resposta){
        Node aux = resposta.getInicio();
        aux.setPai(null);
        aux.setNivel(0);
        aux = aux.getProx();
        while(aux!=null){
            aux.setNivel(aux.getAnt().getNivel()+1);
            aux = aux.getProx();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBExit;
    private javax.swing.JButton jBReset;
    private javax.swing.JButton jBSearch;
    private javax.swing.JButton jBSetDestino;
    private javax.swing.JButton jBSetMapa;
    private javax.swing.JButton jBSetOrigem;
    private javax.swing.JButton jBSetTipoMapa;
    private javax.swing.JComboBox<String> jCBBusca;
    private javax.swing.JComboBox<String> jCBBuscaP;
    private javax.swing.JPanel jPBusca;
    private javax.swing.JPanel jPOp;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTACaminho;
    private javax.swing.JTextArea jTAHeuristica;
    private javax.swing.JTextArea jTAInfo;
    private javax.swing.JTextArea jTAMatrizOriginal;
    private javax.swing.JTextArea jTAMatrizResposta;
    private javax.swing.JTextArea jTAPontos;
    // End of variables declaration//GEN-END:variables
}


import java.util.Collections;
import java.util.Random;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Marco Antonio
 */
public class view extends javax.swing.JFrame {

    int n;
    int[][] matriz;
    Solucao si;
    
    public view() {
        initComponents();
        setLocationRelativeTo(null);
        
        jTAMatriz.setText("Matriz de Adjacência: Não gerada");
        jTAValores.setText("Solucão Inicial: Não definida");
        jTASolucao.setText("Rotina não executada");
        jTAMatriz.setEditable(false);
        jTAValores.setEditable(false);
        jTASolucao.setEditable(false);
        jBSolucao.setEnabled(false);
        jCBBuscas.setEnabled(false);
        jBBusca.setEnabled(false);
        jBComp.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBStart = new javax.swing.JButton();
        jBSolucao = new javax.swing.JButton();
        jBInfo = new javax.swing.JButton();
        jCBBuscas = new javax.swing.JComboBox<>();
        jBExit = new javax.swing.JButton();
        jBReset = new javax.swing.JButton();
        jBBusca = new javax.swing.JButton();
        jBComp = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAValores = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTASolucao = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAMatriz = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotinas"));

        jBStart.setText("Gerar Problema");
        jBStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStartActionPerformed(evt);
            }
        });

        jBSolucao.setText("Gerar Solução Inicial");
        jBSolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSolucaoActionPerformed(evt);
            }
        });

        jBInfo.setText("Exibir Enunciado Problema");
        jBInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInfoActionPerformed(evt);
            }
        });

        jCBBuscas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hill Climbing", "Hill Climbing Alter", "Tempera Simulada" }));

        jBExit.setText("Encerrar Aplicação");
        jBExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExitActionPerformed(evt);
            }
        });

        jBReset.setText("Resetar Problema");
        jBReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResetActionPerformed(evt);
            }
        });

        jBBusca.setText("Realizar Busca");
        jBBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscaActionPerformed(evt);
            }
        });

        jBComp.setText("Executar as 3 buscas");
        jBComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCompActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCBBuscas, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jBSolucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                .addComponent(jBExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBBusca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jBComp, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jBInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBStart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBSolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCBBuscas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBComp, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBReset, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        jTAValores.setColumns(20);
        jTAValores.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTAValores.setRows(5);
        jScrollPane1.setViewportView(jTAValores);

        jTASolucao.setColumns(20);
        jTASolucao.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTASolucao.setRows(5);
        jScrollPane2.setViewportView(jTASolucao);

        jTAMatriz.setColumns(20);
        jTAMatriz.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTAMatriz.setRows(5);
        jTAMatriz.setTabSize(10);
        jScrollPane4.setViewportView(jTAMatriz);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSolucaoActionPerformed
        si = solucaoInicial(n);
        si.setCusto(matriz);
        jTAValores.setText("Solucão Inicial: "+si.showSolucao()+"\nCusto Inicial: "+si.getCusto());
        
        String[] op = {"Operação Singular", "Operação Comparativa"};
        int x = JOptionPane.showOptionDialog(this, "Deseja realizar 1 busca para testá-lo ou comparar a busca entre os 3 métodos?", "Opção de Busca", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, op, op[0]);
        
        if(x==0){
            jCBBuscas.setEnabled(true);
            jBBusca.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Ao selecionar essa opção, escolhas como HC Alter e Tempera gerará formulários para preenchimento de valores de input", "Opção de Busca", 1);
        }else{
            jBComp.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Ao selecionar essa opção, algoritmos como HC Alter e Tempera tem preenchimento automático de valores de input\nHC Alter it = 5\nTempera iti ="+calcTempInit(n, matriz, 20)+"\nTempera itf = 0.01\nTempera fr = 0.95", "Opção de Busca", 1);
        }
        jBSolucao.setEnabled(false);
    }//GEN-LAST:event_jBSolucaoActionPerformed

    private void jBExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jBExitActionPerformed

    private void jBResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResetActionPerformed
        jBSolucao.setEnabled(false);
        jCBBuscas.setEnabled(false);
        jBBusca.setEnabled(false);
        jBComp.setEnabled(false);
        jBReset.setEnabled(false);
        jBStart.setEnabled(true);
        
        jTAMatriz.setText("Matriz de Adjacência: Não gerada");
        jTAValores.setText("Solucão Inicial: Não definida");
        jTASolucao.setText("Rotina não executada");
    }//GEN-LAST:event_jBResetActionPerformed

    private void jBBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscaActionPerformed
        if(jCBBuscas.getSelectedItem()=="Hill Climbing"){
            Solucao hc = hillClimbing(si, n, matriz);
            jTASolucao.setText("Hill Climbing: "+hc.showSolucao()+"\nCusto: "+hc.getCusto()+"\nGanho: "+ganho(si, hc)+"%");
        }else if(jCBBuscas.getSelectedItem()=="Hill Climbing Alter"){
            
            int validator = 0, it = 0;
            while(validator<1){
                try{
                    it = Integer.parseInt(JOptionPane.showInputDialog(this, "Inserir quantidade de iterações para descoberta da Solucão final\nSugestão: 5", "Hill Climbing Alter", 3));
                    validator++;
                    if(it<1){
                        validator = 0;
                        JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0); 
                    }
                }catch(java.lang.Exception e){
                    validator = 0;
                    JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);        
                }
            }
            
            Solucao hca = hillClimbingAlterado(si, n, matriz, it);
            jTASolucao.setText("Hill Climbing Alter: "+hca.showSolucao()+"\nCusto: "+hca.getCusto()+"\nGanho: "+ganho(si, hca)+"%");
        }else if(jCBBuscas.getSelectedItem()=="Tempera Simulada"){
            
            int validator = 0;
            double iti = 0.0, itf = 0.0, fr = 0.0;
            while(validator<1){
                try{
                    iti = Double.parseDouble(JOptionPane.showInputDialog(this, "Inserir valor de iteração (temperatura) inicial\nSugestão: "+calcTempInit(n, matriz, 20), "Tempera Simulada 1/3", 3));
                    validator++;
                    if(iti<0){
                        validator = 0;
                        JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0); 
                    }
                }catch(java.lang.Exception e){
                    validator = 0;
                    JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);        
                }
            }
            
            validator = 0;
            
            while(validator<1){
                try{
                    itf = Double.parseDouble(JOptionPane.showInputDialog(this, "Inserir valor de iteração (temperatura) final\nSugestão: 0.01", "Tempera Simulada 2/3", 3));
                    validator++;
                    if(itf<0){
                        validator = 0;
                        JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0); 
                    }
                }catch(java.lang.Exception e){
                    validator = 0;
                    JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);        
                }
            }
            
            validator = 0;
            
            while(validator<1){
                try{
                    fr = Double.parseDouble(JOptionPane.showInputDialog(this, "Inserir valor do fator redutivo\nSugestão: 0.95", "Tempera Simulada 3/3", 3));
                    validator++;
                    if(itf<0){
                        validator = 0;
                        JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0); 
                    }
                }catch(java.lang.Exception e){
                    validator = 0;
                    JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);        
                }
            }
            Solucao ts = tempera(si, n, matriz, iti, itf, fr);
            jTASolucao.setText("Tempera Simulada: "+ts.showSolucao()+"\nCusto: "+ts.getCusto()+"\nGanho: "+ganho(si, ts)+"%");
        }
        
        jCBBuscas.setEnabled(false);
        jBBusca.setEnabled(false);
    }//GEN-LAST:event_jBBuscaActionPerformed

    private void jBStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStartActionPerformed
        int validator = 0;
        while(validator<1){
            try{
                n = Integer.parseInt(JOptionPane.showInputDialog(this, "Inserir valor para o tamanho do problema (quantidade de vértices no grafo)", "Gerar Problema", 3));
                matriz = geraProblema(n);
                validator++;
                if(n<2){
                    validator = 0;
                    JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);  
                }
            }
            catch(java.lang.Exception e){
                validator = 0;
                JOptionPane.showMessageDialog(this, "VALOR INVÁLIDO", "Warning", 0);        
            }
        }   
        jTAMatriz.setText("Matriz de Adjacência:\n"+printMatriz(matriz));
        jBSolucao.setEnabled(true);
        jBStart.setEnabled(false);
        jBReset.setEnabled(true);
    }//GEN-LAST:event_jBStartActionPerformed

    private void jBCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCompActionPerformed
        Solucao hc = hillClimbing(si, n, matriz);
        jTASolucao.setText("Hill Climbing: "+hc.showSolucao()+"\nCusto: "+hc.getCusto()+"\nGanho: "+ganho(si, hc)+"%\n\n");
        Solucao hca = hillClimbingAlterado(si, n, matriz, 5);
        jTASolucao.setText(jTASolucao.getText()+"Hill Climbing Alter: "+hca.showSolucao()+"\nCusto: "+hca.getCusto()+"\nGanho: "+ganho(si, hca)+"%\n\n");
        Solucao ts = tempera(si, n, matriz, calcTempInit(n, matriz, 20), 0.01, 0.95);
        jTASolucao.setText(jTASolucao.getText()+"Tempera Simulada: "+ts.showSolucao()+"\nCusto: "+ts.getCusto()+"\nGanho: "+ganho(si, ts)+"%");
        
        jBComp.setEnabled(false);
    }//GEN-LAST:event_jBCompActionPerformed

    private void jBInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInfoActionPerformed
        JOptionPane.showMessageDialog(this, "O problema consiste na aplicação do problema do caixeiro viajante (PCV) sobre um estoque. \n" +
"\n" +
"Esse estoque tem grande escala, de modo a utilizar empilhadeiras para colocar e retirar mercadorias armazenadas dele. \n" +
"\n" +
"Frequentemente, há pedidos de determinados produtos presentes nesse estoque, assim, \n" +
"considerando que cada solicitação de diferentes produtos é destinada a uma empilhadeira em específica, \n" +
"utiliza-se um algoritmo PCV para otimização do tempo de retirada de produtos, tal como economia de gasolina da empilhadeira.\n" +
"\n" +
"Esse algoritmo PCV utiliza três metodologias para calcular rotas mais eficientes:\n" +
"\n" +
"•	Hill Climbing\n" +
"•	Hill Climbing Alterado\n" +
"•	Tempera Simulada", "Descrição do Problema",1);        
    }//GEN-LAST:event_jBInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view().setVisible(true);
            }
        });
    }
    
    public static int[][] geraProblema(int n){
        Random r = new Random();
        int[][] res = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(i == j) res[i][j] = 0;
                else res[i][j] = r.nextInt(5, 26);
            }
        }
        return res;
    }
    
    public static String printMatriz(int[][] matriz){
        StringBuilder sb = new StringBuilder();
        
        for(int i = 0; i < matriz.length; i++){
            for(int j = 0; j < matriz[0].length; j++){
                if(matriz[i][j]<10) sb.append("0");
                sb.append(matriz[i][j]).append(" ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
    
    public static Solucao solucaoInicial(int n){
        Solucao res = new Solucao();
        for(int i = 0; i < n; i++){
            res.getArray().add(i);
        }
        Collections.shuffle(res.getArray());
        
        return res;
    }
    
    public static Solucao hillClimbing(Solucao si, int n, int[][] matriz){
        Solucao atual = si;
        Solucao novo;
        
        while(true){
            novo = sucessoresHC(atual, n, matriz);
            if(novo.getCusto()>=atual.getCusto()) return atual;
            atual = novo;
        }
    }
    
    public static Solucao hillClimbingAlterado(Solucao si, int n, int[][] matriz, int limite){
        Solucao atual = si;
        Solucao novo;
        int t = 1;
        while(true){
            novo = sucessoresHC(atual, n, matriz);
            if(novo.getCusto()>=atual.getCusto()){
                if(t>limite)    return atual;
                else t++;
            }else{
                atual = novo;
                t = 1;
            }
        }
    }
    
    public static Solucao sucessoresHC(Solucao atual, int n, int[][] matriz){
        
        Random r = new Random();
        
        Solucao res = new Solucao();
        res.copyArray(atual.getArray());
        res.setCusto(matriz);
        
        Solucao suc = new Solucao();
        
        int ind = r.nextInt(n);
        int aux;
        
        for(int i = 0; i < n-1; i++){
            if(i!=ind){
                suc.copyArray(atual.getArray());
                aux = suc.getArray().get(i);
                suc.getArray().set(i, suc.getArray().get(ind));
                suc.getArray().set(ind, aux);
                suc.setCusto(matriz);
                
                if(suc.getCusto()<res.getCusto()){
                   
                    res.copyArray(suc.getArray());
                    res.setCusto(matriz);
                      
                }
            }
        }
        
        return res;
    }
    
    public static double calcTempInit(int n, int[][] matriz, int qt){
        int[] v = new int[qt];
        double de = 0.0;
        
        for(int i = 0; i < qt ; i++){
            Solucao s = solucaoInicial(n);
            s.setCusto(matriz);
            v[i] = s.getCusto();
        }
        
        for(int i = 0; i < qt-1 ; i++){
            for(int j = i+1; j < qt; j++){
                de += Math.abs(v[i] - v[j]);
            }
        }
        
        de = de/((qt-1)*(qt-2)/(float)2.0);
        double t = -de/Math.log(0.999);
        
        System.out.println("t = "+t);
        
        return t;
    }
    
    public static Solucao sucessoresTS(Solucao atual, int n, int[][] matriz){
        Random r = new Random();
        int ind1 = r.nextInt(n);
        int ind2 = ind1;
        while(ind1==ind2){
            ind2 = r.nextInt(n);
        }
        
        Solucao suc = new Solucao();
        suc.copyArray(atual.getArray());
        int aux = suc.getArray().get(ind1);
        suc.getArray().set(ind1, suc.getArray().get(ind2));
        suc.getArray().set(ind2, aux);
        suc.setCusto(matriz);
        
        return suc;
    }
    
    public static Solucao tempera(Solucao si, int n, int[][] matriz, double tInit, double tFim, double fr){
        Solucao atual = new Solucao(), melhor = new Solucao(), novo; 
        atual.copyArray(si.getArray());
        melhor.copyArray(si.getArray());
        melhor.setCusto(matriz);
        Random r = new Random();
        double t = tInit;
        
        while(t > tFim){
            novo = sucessoresTS(atual, n, matriz);
            int de = novo.getCusto() - atual.getCusto();
            
            if(de < 0){
                atual.copyArray(novo.getArray());
                atual.setCusto(matriz);
                
                melhor.copyArray(novo.getArray());
                melhor.setCusto(matriz);
            }else{
                int rnd = r.nextInt(2);
                double aux = Math.exp(-de/t);
                if(aux > rnd){
                    atual.copyArray(novo.getArray());
                    atual.setCusto(matriz);
                }
            }
            t=t*fr;
        }
        return melhor;
    }
    
     public static double ganho(Solucao si, Solucao sf){
        double ganho = ((double)(si.getCusto()-sf.getCusto())/(double)si.getCusto())* Math.pow(10, 4);
        ganho = Math.floor(ganho);
        ganho = ganho / Math.pow(10, 2);
        return ganho;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBusca;
    private javax.swing.JButton jBComp;
    private javax.swing.JButton jBExit;
    private javax.swing.JButton jBInfo;
    private javax.swing.JButton jBReset;
    private javax.swing.JButton jBSolucao;
    private javax.swing.JButton jBStart;
    private javax.swing.JComboBox<String> jCBBuscas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTAMatriz;
    private javax.swing.JTextArea jTASolucao;
    private javax.swing.JTextArea jTAValores;
    // End of variables declaration//GEN-END:variables
}
